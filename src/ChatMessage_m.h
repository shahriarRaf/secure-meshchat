//
// Generated file, do not edit! Created by opp_msgtool 6.2 from src/ChatMessage.msg.
//

#ifndef __CHATMESSAGE_M_H
#define __CHATMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0602
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class ChatMessage;
/**
 * Class generated from <tt>src/ChatMessage.msg:1</tt> by opp_msgtool.
 * <pre>
 * packet ChatMessage
 * {
 *     int messageId;
 *     int sourceId;
 *     int destinationId;
 *     double timestamp;
 *     int ttl;
 *     int senderId;
 *     bool isKeyExchange;
 *     bool isEncrypted;
 *     bool isEmergency;
 *     string payload;
 *     string iv;
 *     string tag;
 * }
 * </pre>
 */
class ChatMessage : public ::omnetpp::cPacket
{
  protected:
    int messageId = 0;
    int sourceId = 0;
    int destinationId = 0;
    double timestamp = 0;
    int ttl = 0;
    int senderId = 0;
    bool isKeyExchange_ = false;
    bool isEncrypted_ = false;
    bool isEmergency_ = false;
    omnetpp::opp_string payload;
    omnetpp::opp_string iv;
    omnetpp::opp_string tag;

  private:
    void copy(const ChatMessage& other);

  protected:
    bool operator==(const ChatMessage&) = delete;

  public:
    ChatMessage(const char *name=nullptr, short kind=0);
    ChatMessage(const ChatMessage& other);
    virtual ~ChatMessage();
    ChatMessage& operator=(const ChatMessage& other);
    virtual ChatMessage *dup() const override {return new ChatMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getMessageId() const;
    virtual void setMessageId(int messageId);

    virtual int getSourceId() const;
    virtual void setSourceId(int sourceId);

    virtual int getDestinationId() const;
    virtual void setDestinationId(int destinationId);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);

    virtual int getTtl() const;
    virtual void setTtl(int ttl);

    virtual int getSenderId() const;
    virtual void setSenderId(int senderId);

    virtual bool isKeyExchange() const;
    virtual void setIsKeyExchange(bool isKeyExchange);

    virtual bool isEncrypted() const;
    virtual void setIsEncrypted(bool isEncrypted);

    virtual bool isEmergency() const;
    virtual void setIsEmergency(bool isEmergency);

    virtual const char * getPayload() const;
    virtual void setPayload(const char * payload);

    virtual const char * getIv() const;
    virtual void setIv(const char * iv);

    virtual const char * getTag() const;
    virtual void setTag(const char * tag);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ChatMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ChatMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline ChatMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<ChatMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __CHATMESSAGE_M_H

